*** File /home/nofunny/Рабочий стол/study/AvS/lab6/main.c:
                #include <iostream>
                #include <cstdlib>
                #include <ctime>
                #include <inttypes.h>
                
                
           1 -> void matrix(long int n) {
                
                    srand(clock());
                
                    double *a, *b, *c;
                
                    a = static_cast<double *>(malloc(sizeof(*a) * n * n));
                    b = static_cast<double *>(malloc(sizeof(*b) * n * n));
                    c = static_cast<double *>(malloc(sizeof(*c) * n * n));
                
                
                    for (int i = 0; i < n; i++) {
                        for (int j = 0; j < n; j++)
                            a[i * n + j] = (double) rand() / RAND_MAX;
                    }
                
                    for (int i = 0; i < n; i++) {
                        for (int j = 0; j < n; j++)
                            b[i * n + j] = (double) rand() / RAND_MAX;
                    }
                
                
                    for (int i = 0; i < n; i++) {
                        for (int j = 0; j < n; j++) {
                            c[i * n + j] = 0;
                            for (int k = 0; k < n; k++)
                                c[i * n + j] += a[i * n + k] * b[k * n + j];
                        }
                    }
                
                    printf("c[n][n] = a[n][n] * b[n][n]; n= %ld)\n", n);
                    printf("Memory used: %" PRIu64 " MiB\n", (uint64_t) (((double) (n * n) + (n * n) + (n * n)) * sizeof(double)) >> 20);
                
                
                    free(a);
                    free(b);
                    free(c);
                
                }
                
           1 -> void matrix_block(long int n, int BlockSize){
                    double *a, *b, *c;
                
                    a = static_cast<double *>(malloc(sizeof(*a) * n * n));
                    b = static_cast<double *>(malloc(sizeof(*b) * n * n));
                    c = static_cast<double *>(malloc(sizeof(*c) * n * n));
                
                
                    for (int i = 0; i < n; i++) {
                        for (int j = 0; j < n; j++)
                            a[i * n + j] = (double) rand() / RAND_MAX;
                    }
                
                    for (int i = 0; i < n; i++) {
                        for (int j = 0; j < n; j++)
                            b[i * n + j] = (double) rand() / RAND_MAX;
                    }
                    int GridSize = int (n/double(BlockSize));
                    for (int n=0; n<GridSize; n++)
                        for (int m=0; m<GridSize; m++)
                            for (int iter=0; iter<GridSize; iter++)
                                for (int i=n*BlockSize;i<(n+1)*BlockSize; i++)
                                    for (int j=m*BlockSize;j<(m+1)*BlockSize; j++)
                                        for (int k=iter*BlockSize;
                                             k<(iter+1)*BlockSize; k++)
                                            c[i*n+j] += a[i*n+k] * b[k*n+j];
                
                     free(a);
                     free(b);
                     free(c);
                }
                
                
       ##### -> int main() {
                    double start, stop;
                
                    start = clock();
                    matrix(1000);
                    stop = clock();
                    printf("String: %f\n", (stop - start) / 1000000);
                
                    start = clock();
                    matrix_block(1000, 504);
                    stop = clock();
                    printf("Block: %f\n", (stop - start) / 1000000);
                
                
                
                    return 0;
           1 -> }


Top 10 Lines:

     Line      Count

        7          1
       47          1
       96          1

Execution Summary:

        4   Executable lines in this file
        4   Lines executed
   100.00   Percent of the file executed

        3   Total number of line executions
     0.75   Average executions per line
